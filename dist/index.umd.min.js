!function(e,o){"object"==typeof exports&&"undefined"!=typeof module?o(exports,require("net"),require("ssh2")):"function"==typeof define&&define.amd?define(["exports","net","ssh2"],o):o((e="undefined"!=typeof globalThis?globalThis:e||self).NodeSshTunnel={},e.net,e.ssh2)}(this,(function(e,o,n){"use strict";const r=async e=>{let n=Object.assign({},e);return n.port||n.host||(n=null),new Promise(((e,r)=>{let t=o.createServer(),s=e=>{r(e)};t.on("error",s),process.on("uncaughtException",s),t.listen(n),t.on("listening",(()=>{process.removeListener("uncaughtException",s),e(t)}))}))},t=async e=>new Promise(((o,r)=>{let t=new n.Client;t.on("ready",(()=>o(t))),t.on("error",(e=>{r(e)})),t.connect(e)})),s=async e=>new Promise((async(o,n)=>{try{console.log("ReCreateSSHConnection");const n=await t(e);o(n)}catch(n){setTimeout((()=>{o(s(e))}),1e3)}})),c=async(e,o,n)=>{const c=Object.assign({port:22,username:"root"},e),l=(Array.isArray(o)?o:[o]).map((e=>Object.assign({dstAddr:"127.0.0.1",srcAddr:"0.0.0.0"},e))),a=Object.assign({autoClose:!1,reconnectOnError:!0},n||{});let i;const d=e=>{a.reconnectOnError&&(e.on("error",(async()=>{i=void 0,console.log("sshConnection","error"),i=await s(c),d(i),console.log("sshConnection","reconnected")})),e.on("close",(async()=>{})))};try{i=await t(c),d(i)}catch(e){return Promise.reject("用户名或密码错误, 请检查你的配置信息")}const u=await Promise.all(l.map((async o=>{const n={host:o.srcAddr,port:o.srcPort};let t;const s=l=>{a.reconnectOnError&&l.on("error",(async()=>{t=await r(n),s(t)})),l.on("connection",c),l.on("close",(()=>{console.log("close tunel: ",`${o.srcAddr}:${o.srcPort} => ${e.host}:${o.dstPort}`)}))};console.log("create tunel success: ",`${o.srcAddr}:${o.srcPort} => ${e.host}:${o.dstPort}`);const c=(e,n=0)=>{if(a.autoClose&&((e,o)=>{o.on("close",(()=>{e.getConnections(((o,n)=>{0===n&&e.close()}))}))})(t,e),i)try{i.forwardOut(o.srcAddr,o.srcPort,o.dstAddr,o.dstPort,((o,n)=>{if(o){console.log(o.message),e.on("close",(()=>{})),e.on("error",(()=>{}));try{e.end(),e.destroy()}catch(e){console.log(e)}}else e.on("close",(()=>{n.end()})),e.on("error",(()=>{n.end()})),e.pipe(n).pipe(e)}))}catch(o){e.on("close",(()=>{})),e.on("error",(()=>{}));try{e.end(),e.destroy()}catch(e){console.log(e)}}else if(n<20)setTimeout((()=>{c(e,n+1)}),500);else{e.on("close",(()=>{})),e.on("error",(()=>{}));try{e.end(),e.destroy()}catch(e){console.log(e)}}};try{return t=await r(n),s(t),t}catch(e){return void console.log(e)}})));return{servers:u,sshConnection:i,close:()=>{if(u.forEach((e=>{if(e)try{e.close()}catch(e){console.log(e)}})),i)try{i.end(),i.destroy()}catch(e){console.log(e)}}}};e.createTunnel=c,e.default=c,Object.defineProperty(e,"__esModule",{value:!0})}));
